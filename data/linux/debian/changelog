mitsuba (0.3.1-1) unstable; urgency=low

  * Photon mapper: The photon mapper had some serious issues in the 
    last release. These are now fixed, and it should run faster too.
  * On Linux/x86_64, the performance of the single precision exp() and log() 
    math library functions is extremely poor. Mitsuba now uses the double
    prevision versions of these functions by default.
  * Primitive clipping: Fixed numerical issues that occurred when using
    primitive clipping in a double precision build.
  * The adaptive integrator now better interacts with certain sub-integrators.
  * Instanced analytic shapes (e.g. spheres, cylinders, ..) are now supported, 
    and an error involving network rendering with instanced geometry is fixed.
  * Fixed a serious issue that could destroy a scene file when saving from a cloned tab!
  * Fixed some bad GUI behavior in multi-screen setups
  * Textures applied to an OBJ mesh used to be vertically flipped. This is now fixed.
  * Improved performance of the hair intersection primitive
  * Fixed an off-by-one error in the texture lookup code
 -- Wenzel Jakob <wenzel@cs.cornell.edu>  Fri, 13 Apr 2012 00:00:00 -0400


mitsuba (0.3.0-1) unstable; urgency=low

  * Added Python bindings that can be used to instantiate plugins
    and control rendering processes.
  * Spectral rendering: most of the code pertaining to spectral 
    rendering has seen a significant overhaul. It is now faster and 
    in certain cases more accurate.
  * Flexible material classes: this release introduces a robust and 
    very general suite of eight physically-based smooth and rough 
    (microfacet-based) material classes.
  * Material modifiers: two new material modifiers (bump & coating)
    can be applied to BSDFs to create new materials.
  * Material verification: the sampling methods of all material 
    models in Mitsuba are now automatically verified with the help 
    of statistical hypothesis tests (using Chi^2-tests).
  * Generated documentation: there is now a javadoc-like system, 
    which extracts documentation directly from the plugin source code 
    and stitches it into a LaTeX reference document.
  * lookAt: Mitsuba inherited a bug from PBRT, where the <lookAt> 
    tag changed the handedness of the coordinate system. This is now  
    fixed--also, the syntax of this tag has changed to make it easier to read.
  * Scene portability: A new conversion tool ensures that old and incompatible
    scenes can be translated into the scene description format of the 
    most recent version.
  * Contributed plugins: Tom Kazimiers and Papas have contributed 
    implementations of the Preetham Sun & Sky model and the Hanrahan-Krueger
    scattering model.
  * Photon mapping: The Photon map integrator has been rewritten for 
    improved accuracy and better performance. Furthermore, the underlying
    data structure has been replaced with a ~50% faster implementation.

 -- Wenzel Jakob <wenzel@cs.cornell.edu>  Mon, 1 Sep 2011 00:00:00 -0400

mitsuba (0.2.1-1) unstable; urgency=low

  * Completely rewritten participating layer with better robustness and support for many participating media within the same scene
  * Rewritten micro-flake model implementation, which is faster, more accurate, and supports a larger range of material parameters
  * Added the Irawan & Marschner woven cloth BRDF model
  * Includes a script to automate the cration of render farms on the Amazon Elastic Compute Cloud (EC2).
  * The Blender plugin was fixed so that it works with Blender 2.56
  * Volumetric Photon Mapping is now supported using the Beam Radiance Estimate
  * The COLLADA importer handles larger files, which previously lead to crashes
  * New and more intuitive rotation controller for the interactive preview
  * Many bugfixes

 -- Wenzel Jakob <wenzel@cs.cornell.edu>  Tue, 3 Jun 2011 23:17:00 -0400

mitsuba (0.2.0-1) unstable; urgency=low

  * The COLLADA importer is more robust and should handle most scenes (hm, this sounds familiar). Rather than generating hundreds of translated mesh files, the new version instead produces one single compressed file.
  * I've added an experimental plugin for Blender 2.5 integration, including a custom material designer. Since it depends on features which won't be in Blender until the upcoming 2.56 release, it is currently necessary to compile Blender from SVN to use the plugin. Many thanks go to Doug Hammond for providing his excellent EF package, which the plugin uses extensively.
  * The KD-tree acceleration and construction code has been completely rewritten. The new code produces noticeably better trees and does so within a fraction of the time of the old version. It also scales to very large polygonal meshes (>20M triangles), whereas the previous implementation would quickly exhaust all available memory in such cases. (see http://www.mitsuba-renderer.org/devblog/archives/10-New-acceleration-data-structures.html for details)
  * Instancing support was added, and there is limited (rigid) animation support for shapes.
  * Edgar has kindly contributed patches to compile Mitsuba using the Intel C++ compiler. Official windows 32-/64-bit builds now use this compiler, since it produces faster-running executables (in comparison to Visual Studio).
  * The XML schema of the scene description language is now less picky. Specifically, it is possible to specify properties and objects in an arbitrary order.
  * Standard UV texture mapping controls (offset, scale) are provided
  * Luminaire importance sampling is more flexible. The previous implementation sampled a light source proportional to its power, which was often exactly the wrong thing to do. In this release, the sampling weights ca be manually specified.
  * There is partial support for rendering vast amounts of hair (partial because only the intersection shape is implemented at this point -- no hair-specific scattering models have been added yet)
  * A PLY file loader based on libply (courtesy of Ares Lagae) was added
  * Vertex colors are now accessible within the renderer. This is implemented using a special "texture", which forwards the color information to scattering models
  * Severe lock contention issues in the irradiance cache were fixed (these resulted in slow performance when rendering on many cores).
  * The loading dialog now contains a console, which shows what is happening while waiting for a large scene to load
  * The builtin environment map luminaire support importance sampling (it did uniform sampling before - jikes!)
  * A bunch of materials and textures now have GLSL implementations so that they can be used in the interactive preview
  * The preview itself should be quite a bit faster due to optimizations in how geometry is passed to the GPU.

  As usual, a large number of bugs were also fixed. The documentation is still rather incomplete, but I'm working on it.

 -- Wenzel Jakob <wenzel@cs.cornell.edu>  Tue, 23 Nov 2010 02:06:00 -0400

mitsuba (0.1.3-1) unstable; urgency=low

  This is mainly a bugfix release to address a serious regression in the 
  material system. Other notable changes are: 

  * Imported scenes now store relative paths
  * OBJ importing works on Windows
  * Realtime preview (OpenGL + RTRT) fixed for point sources
  * The anisotropic Ward BRDF is now supported in the preview
  * Faster texture loading
  * The renderer now has a testcase framework similar to JUnit
 
 -- Wenzel Jakob <wenzel@cs.cornell.edu>  Wed, 8 Sep 2010 09:59:00 -0400

mitsuba (0.1.2-1) unstable; urgency=low

  * Numerous bugfixes
  * Vastly improved COLLADA importer
  * Basic user interface for running the importer
  * Support for environment sources in the realtime preview
  * When pressing the stop button while rendering, the partially rendered
    scene now remains on the screen. Pressing the stop button a second time
    switches back to the realtime preview.
  * The user interface now has a fallback mode when the graphics card
    is lacking some required OpenGL features.
  * Create default cameras/lightsources if none are specified in a scene
  * Support for drag & drop in the user interface
  * The Mitsuba user interface now also doubles as an EXR viewer / tonemapper. 
    Drag an EXR file onto the UI or open it using the File menu, and the image 
    opens in a new tab. Afterwards, it is possible to export the image as a tonemapped
    8-bit PNG image.
  * The realtime preview now has a 'force diffuse' feature to improve
    convergence in scenes with lots of glossy materials.
  * Two different navigation modes can now be chosen in the program settings
  * New material types: composite, difftrans, transparent, mask.
  * ldrtexture: support for loading BMP and TGA images.
  * Switch to Xerces-C++ 3

 -- Wenzel Jakob <wenzel@cs.cornell.edu>  Fri, 3 Sep 2010 17:16:03 -0400

mitsuba (0.1.1-1) unstable; urgency=low

  * Initial release 

 -- Wenzel Jakob <wenzel@cs.cornell.edu>  Sat, 17 Jul 2010 23:56:03 -0400
